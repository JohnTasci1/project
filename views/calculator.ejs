<%- include("partials/header") -%>
<!-- I will make the calculator here -->
<br/>
<div class = "calculatorText">
  <h3>We introduce to you a calculator!</h3>
</div>
<div style = "padding:5%" class = "calculator-grid">
  <div class = "output">
    <div data-previous-operand class = "previous-operand"></div>
    <div data-current-operand class = "current-operand"></div>
  </div>
  <button data-all-clear class = "span-two btn-primary">AC</button>
  <button data-delete class = "btn-primary">DEL</button>
  <button data-operation class = "btn-primary">รท</button>
  <button data-number class = "btn-primary">1</button>
  <button data-number class = "btn-primary">2</button>
  <button data-number class = "btn-primary">3</button>
  <button data-operation class = "btn-primary">x</button>
  <button data-number class = "btn-primary">4</button>
  <button data-number class = "btn-primary">5</button>
  <button data-number class = "btn-primary">6</button>
  <button data-operation class = "btn-primary">+</button>
  <button data-number class = "btn-primary">7</button>
  <button data-number class = "btn-primary">8</button>
  <button data-number class = "btn-primary">9</button>
  <button data-operation class = "btn-primary">-</button>
  <button data-number class = "btn-primary">.</button>
  <button data-number class = "btn-primary">0</button>
  <button data-equals class = "span-two btn-primary">=</button>
</div>
<div>
<script>
 class Calculator {
      // Function that takes all inputs and values
        constructor(previousOperandTextElement, currentOperandTextElement){
          this.previousOperandTextElement = previousOperandTextElement
          this.currentOperandTextElement = currentOperandTextElement
          this.clear()
        }
        //Clears the calculator
        clear(){
          this.currentOperand = ''
          this.previousOperand = ''
          this.operation = undefined
        }

        delete(){
            this.currentOperand = this.currentOperand.toString().slice(0,-1)
        }

        appendNumber(number){
            //Only allows one period
            if (number === "." && this.currentOperand.includes(".")) return
            //The numbers you clicked will be displayed together
            this.currentOperand = this.currentOperand.toString() + number.toString();
        }

        chooseOperation(operation){
          if(this.currentOperand === '') return
          if (this.previousOperand !== ''){
            this.compute()
          }
            // After operation is clicked it will turn into nothing
            this.operation = operation
            this.previousOperand = this.currentOperand
            this.currentOperand = ''
        }
        compute(){
          // Result of the function
          let computation
          //Convert String to Number
          const prev = parseFloat(this.previousOperand)
          const current = parseFloat(this.currentOperand)
          //If no number is typed then equal won't work
          if (isNaN(prev) || isNaN(current)) return
          //calculates based on the operation
          switch (this.operation) {
              case "+": 
              computation = prev + current
            break
              case "-": 
              computation = prev - current
              break
            case "x": 
              computation = prev * current
              break
            case "รท": 
              computation = prev / current
              break
              //else statement in switch is default 
              //if the equation is invalid
            default:
              return
          }
          //displays the answer of the equation
          this.currentOperand = computation
          this.operation = undefined
          this.previousOperand = ''
        }

      getDisplayNumber(number){
          const stringNumber = number.toString()
          const integerDigits = parseFloat(stringNumber.split(".")[0])
          const decimalDigits = stringNumber.split(".")[1]
          let integerDisplay
          if (isNaN(integerDigits)){
            integerDisplay = ""
          } else {
            integerDisplay = integerDigits.toLocaleString('en', {maximumFractionDigits: 0})
          }
            if(decimalDigits != null){
              return `${integerDisplay}. ${decimalDigits}`
            } else {
              return integerDisplay
            }
          }
        

        updateDisplay(){
            // The innerText of this is equal to this
            this.currentOperandTextElement.innerText = this.getDisplayNumber(this.currentOperand);
            // The number after operation is clicked will be displayed here
            if (this.operation != null) {
            this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`
            } else {
            this.previousOperandTextElement.innerText = ''
            }

          }
    }
    // Gets all the buttons locations
    const numberButtons = document.querySelectorAll("[data-number]");
    const operationButtons = document.querySelectorAll("[data-operation]");
    const equalsButton = document.querySelector("[data-equals]");
    const deleteButton = document.querySelector("[data-delete]");
    const allClearButton = document.querySelector("[data-all-clear]");
    const previousOperandTextElement = document.querySelector("[data-previous-operand]");
    const currentOperandTextElement = document.querySelector("[data-current-operand]");
    // You identify new classes like this
    const calculator = new Calculator(previousOperandTextElement, currentOperandTextElement);
    // Adds event listener to check what number you clicked
    numberButtons.forEach(button => {
          button.addEventListener("click", () => {
          calculator.appendNumber(button.innerText);
          calculator.updateDisplay();
        })
    })
// Adds event listener to check what operations you clicked
    operationButtons.forEach(button => {
          button.addEventListener("click", () => {
          calculator.chooseOperation(button.innerText);
          calculator.updateDisplay();
        })
    })
// Adds event listener to check when you clicked equals
    equalsButton.addEventListener("click", button => {
          calculator.compute(button.innerText)
          calculator.updateDisplay()
    })
    //Clears the whole thing
    allClearButton.addEventListener("click", button => {
          calculator.clear()
          calculator.updateDisplay()
    });
    //Deletes 1
    deleteButton.addEventListener("click", button => {
          calculator.delete()
          calculator.updateDisplay()
    });
  </script>
</div>
<%- include("partials/footer") -%>